## Load packages
library(tidyverse)
library(here)
library(sf)
library(tidyterra)
library(tidyterra)
## Load data
ken_sf   <- st_read(here("data", "country.geojson"))
precip_r <- rast(here("data", "precipitation.tif"))
## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(tidyterra)
## Load data
ken_sf   <- st_read(here("data", "country.geojson"))
precip_r <- rast(here("data", "precipitation.tif"))
precip_r <- precip_r %>%
crop(ken_sf) %>%
mask(ken_sf) %>%
mean()
## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(leaflet)
## Load data
ken_sf   <- st_read(here("data", "country.geojson"))
precip_r <- rast(here("data", "precipitation.tif"))
## Crop/Mask to Kenya
precip_r <- precip_r %>% crop(ken_sf) %>% mask(ken_sf)
precip_q2_r <- precip_r[[4:6]] %>% mean()
precip_q3_r <- precip_r[[7:9]] %>% mean()
precip_q4_r <- precip_r[[10:12]] %>% mean()
## Define color palette
pal <- colorNumeric("Blues", unique(as.numeric(precip_q1_r[]),
as.numeric(precip_q2_r[]),
as.numeric(precip_q3_r[]),
as.numeric(precip_q4_r[])),
na.color = "transparent")
## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(leaflet)
## Load data
ken_sf   <- st_read(here("data", "country.geojson"))
precip_r <- rast(here("data", "precipitation.tif"))
## Crop/Mask to Kenya
precip_r <- precip_r %>% crop(ken_sf) %>% mask(ken_sf)
## Compute quarterly precipitation
precip_q1_r <- precip_r[[1:3]] %>% mean()
precip_q2_r <- precip_r[[4:6]] %>% mean()
precip_q3_r <- precip_r[[7:9]] %>% mean()
precip_q4_r <- precip_r[[10:12]] %>% mean()
## Define color palette
pal <- colorNumeric("Blues", unique(as.numeric(precip_q1_r[]),
as.numeric(precip_q2_r[]),
as.numeric(precip_q3_r[]),
as.numeric(precip_q4_r[])),
na.color = "transparent")
## Define color palette
v <- unique(as.numeric(precip_q1_r[]),
as.numeric(precip_q2_r[]),
as.numeric(precip_q3_r[]),
as.numeric(precip_q4_r[]))
## Define color palette
pal <- colorNumeric("Blues", unique(c(as.numeric(precip_q1_r[]),
as.numeric(precip_q2_r[]),
as.numeric(precip_q3_r[]),
as.numeric(precip_q4_r[]))),
na.color = "transparent")
leaflet() %>%
addProviderTiles(providers$Stadia.StamenTonerLite) %>%
addRasterImage(precip_q1_r, colors = pal, opacity = 1, group = "Q1: Jan - March") %>%
addRasterImage(precip_q2_r, colors = pal, opacity = 1, group = "Q2: April - June") %>%
addRasterImage(precip_q3_r, colors = pal, opacity = 1, group = "Q3: July - Sept") %>%
addRasterImage(precip_q4_r, colors = pal, opacity = 1, group = "Q4: Oct - Dec") %>%
addLayersControl(
baseGroups = c("Q1: Jan - March",
"Q2: April - June",
"Q3: July - Sept",
"Q4: Oct - Dec"),
options = layersControlOptions(collapsed=FALSE)
)
ken_sf   <- st_read(here("data", "country.geojson"))
#| code-fold: true
# Download data
## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(geodata)
library(osmdata)
library(leaflet)
## Kenya
COUNTRY_OUT <- here("data", "country.geojson")
if(!file.exists(COUNTRY_OUT)){
ken_1_sf <- gadm("KEN", level=1, path = tempdir()) %>% st_as_sf()
ken_1_sf <- ken_1_sf %>% st_simplify(dTolerance = 60)
ken_1_sf <- ken_1_sf %>%
select(NAME_1)
st_write(ken_1_sf, COUNTRY_OUT, delete_dsn = T)
}
## Elevation
RAST_OUT <- here("data", "elevation.tif")
if(!file.exists(RAST_OUT)){
elev_r <- elevation_30s(country="KEN", path=tempdir())
writeRaster(elev_r, RAST_OUT, overwrite=T)
}
## Precipiation
RAST_STACK_OUT <- here("data", "precipitation.tif")
if(!file.exists(RAST_STACK_OUT)){
precip_kenya_r <- worldclim_country(var = "prec", res = 10,
country = "KEN",
path = tempdir())
writeRaster(precip_kenya_r, RAST_STACK_OUT, overwrite=T)
}
## Nairobi
POLY_OUT <- here("data", "city.geojson")
if(!file.exists(POLY_OUT)){
ken_sf <- gadm("KEN", level=2, path = tempdir()) %>% st_as_sf()
nbo_sf <- ken_sf %>% filter(NAME_1 %in% "Nairobi")
st_write(nbo_sf, POLY_OUT, delete_dsn = T)
}
## Roads
LINE_OUT <- here("data", "roads.geojson")
if(!file.exists(LINE_OUT)){
ken_sf <- gadm("KEN", level=2, path = tempdir()) %>% st_as_sf()
nbo_sf <- ken_sf %>% filter(NAME_1 %in% "Nairobi")
roads_list <- opq(bbox = st_bbox(nbo_sf)) %>%
add_osm_feature(key = 'highway', value = c('trunk',
'motorway',
'primary',
'secondary')) %>%
osmdata_sf()
roads_sf <- roads_list$osm_lines
roads_sf <- roads_sf %>% st_intersection(nbo_sf)
roads_sf$geom_type <- roads_sf %>% st_geometry_type %>% as.character()
roads_sf <- roads_sf[roads_sf$geom_type %in% "LINESTRING",]
roads_sf <- roads_sf %>%
dplyr::select(osm_id, name, highway)
st_write(roads_sf, LINE_OUT, delete_dsn = T)
}
## Schools
POINT_OUT <- here("data", "schools.csv")
if(!file.exists(POINT_OUT)){
ken_sf <- gadm("KEN", level=2, path = tempdir()) %>% st_as_sf()
nbo_sf <- ken_sf %>% filter(NAME_1 %in% "Nairobi")
schools_list <- opq(bbox = st_bbox(nbo_sf)) %>%
add_osm_feature(key = 'amenity',
value = 'school') %>%
osmdata_sf()
schools_sf <- schools_list$osm_points
schools_sf <- schools_sf %>% st_intersection(nbo_sf)
schools_sf <- schools_sf %>%
dplyr::select(osm_id, name)
schools_df <- schools_sf %>%
st_coordinates() %>%
as.data.frame() %>%
dplyr::rename(longitude = X,
latitude = Y)
write_csv(schools_df, POINT_OUT)
}
library(tidyverse)
library(here)
library(sf)
library(leaflet)
city_sf <- st_read(here("data", "city.geojson"))
# Examine first few observations
head(city_sf)
# Number of rows
nrow(city_sf)
# Filter
city_sf %>%
filter(NAME_2 == "Langata")
# Check coordinate reference system
st_crs(city_sf)
# Check geometry type
st_geometry_type(city_sf) %>% head()
# Calculate area
st_area(city_sf)
# Add as variable
city_sf <- city_sf %>%
mutate(area_m2 = st_area(city_sf))
ggplot() +
geom_sf(data = city_sf)
roads_sf <- st_read(here("data", "roads.geojson"))
head(roads_sf)
nrow(roads_sf)
st_length(roads_sf) %>% head()
ggplot() +
geom_sf(data = roads_sf)
schools_df <- read_csv(here("data", "schools.csv"))
head(schools_df)
schools_sf <- schools_df %>%
st_as_sf(coords = c("longitude", "latitude"),
crs = 4326)
head(schools_sf)
ggplot() +
geom_sf(data = schools_sf)
# Merge data with city
city_sf <- city_sf %>%
mutate(area = city_sf %>%
st_area %>% # Calculate area
as.numeric()) # Remove units
# Plot
ggplot() +
geom_sf(data = city_sf,
aes(fill = area),
color = "black") +
scale_fill_distiller(palette = "YlGnBu",
direction = -1) +
labs(fill = "Area",
title = "Area of Nairobi's ADM2s") +
theme_void() +
theme(legend.position = c(0.8, 0.3),
plot.title = element_text(face = "bold"))
leaflet() %>%
addTiles() %>% # Basemap
addPolygons(data = city_sf)
trunk_sf <- roads_sf %>%
filter(highway == "trunk")
leaflet() %>%
addTiles() %>%
addPolygons(data = city_sf, fillOpacity = 0.1) %>%
addPolylines(data = trunk_sf, color = "red") %>%
addCircles(data = schools_sf, color = "black")
## Dissolve
city_adm1_union_sf <- city_sf %>%
group_by(NAME_1) %>%
summarise(geometry = st_union(geometry)) %>%
ungroup()
city_adm1_combine_sf <- city_sf %>%
group_by(NAME_1) %>%
summarise(geometry = st_combine(geometry)) %>%
ungroup()
## Check N rows
nrow(city_sf) # Original
nrow(city_adm1_union_sf)
nrow(city_adm1_combine_sf)
## Plot
ggplot() +
geom_sf(data = city_adm1_union_sf,
aes(color = "Using: st_union"),
fill = NA,
linewidth = 3) +
geom_sf(data = city_adm1_combine_sf,
aes(color = "Using: st_combine"),
fill = NA,
linewidth = 1) +
labs(color = NULL) +
theme_void() +
theme(legend.position = c(0.8, 0.25))
motor_1km_sf <- roads_sf %>%
filter(highway == "motorway") %>%
st_buffer(dist = 1000)
ggplot() +
geom_sf(data = motor_1km_sf)
st_transform(city_sf, 21097) %>%
select(NAME_2) %>%
head()
city_sf %>%
st_centroid() %>%
select(NAME_2) %>%
head()
# INCORRECT: Does not work to remove geometry
city_sf %>%
select(-geometry) %>%
head()
# CORRECT: Remove geometry and convert from sf to dataframe
city_sf %>%
st_drop_geometry() %>%
head()
st_bbox(city_sf)
city_sf$NAME_2
lng_roy_sf <- city_sf %>%
filter(NAME_2 %in% c("Langata",
"Roysambu")) %>%
st_union()
lng_roy_sf <- city_sf %>%
filter(NAME_2 %in% c("Langata",
"Roysambu")) %>%
st_union() # Simplifies things if make 1 unit
roads_lang_sf <- st_intersection(roads_sf, lang_sf)
lng_roy_sf <- city_sf %>%
filter(NAME_2 %in% c("Langata",
"Roysambu")) %>%
st_union() # Simplifies things if make 1 unit
roads_lang_sf <- st_intersection(roads_sf, lng_roy_sf)
ggplot() +
geom_sf(data = city_sf) +
geom_sf(data = lng_roy_sf, aes(color = "Langata")) +
geom_sf(data = roads_lng_roy_sf) +
labs(color = NULL) +
theme_void() +
theme(legend.position = c(0.8, 0.25))
lng_roy_sf <- city_sf %>%
filter(NAME_2 %in% c("Langata",
"Roysambu")) %>%
st_union() # Simplifies things if make 1 unit
roads_lng_roy_sf <- st_intersection(roads_sf, lng_roy_sf)
ggplot() +
geom_sf(data = city_sf) +
geom_sf(data = lng_roy_sf, aes(color = "Langata")) +
geom_sf(data = roads_lng_roy_sf) +
labs(color = NULL) +
theme_void() +
theme(legend.position = c(0.8, 0.25))
ggplot() +
geom_sf(data = city_sf) +
geom_sf(data = lng_roy_sf, aes(color = "Langata or\nRoysambu")) +
geom_sf(data = roads_lng_roy_sf) +
labs(color = NULL) +
theme_void() +
theme(legend.position = c(0.8, 0.25))
ggplot() +
geom_sf(data = city_sf) +
geom_sf(data = lng_roy_sf, aes(color = "Langata or\nRoysambu")) +
geom_sf(data = roads_lng_roy_sf) +
labs(color = NULL) +
theme_void() +
theme(legend.position = c(0.8, 0.25))
## Filter
motor_sf <- roads_sf %>%
filter(highway == "motorway")
lng_roy_sf <- city_sf %>%
filter(NAME_2 %in% c("Langata",
"Roysambu"))
## Filter
motor_sf <- roads_sf %>%
filter(highway == "motorway")
lng_roy_sf <- city_sf %>%
filter(NAME_2 %in% c("Langata",
"Roysambu"))
## Intersect
motor_sf$inter_roads <- st_intersects(motor_sf, lng_roy_sf, sparse = F) %>%
apply(1, max)
## Examine results
table(motor_sf$inter_roads)
# Sindh Reconstruction IE
# Main Script
# Filepaths --------------------------------------------------------------------
if(Sys.info()[["user"]] == "robmarty"){
git_dir <- file.path("~/Documents", "Github", "sindh-reconstruction-ie")
db_dir  <- file.path("~/Dropbox", "World Bank", "IEs", "Sindh Reconstruction IE")
}
if(Sys.info()[["user"]] == "Mareeha"){
git_dir  <- "D:/Documents/GitHub/sindh-reconstruction-ie"
db_dir <- "C:/Users/Mareeha/Dropbox/Sindh Reconstruction IE"
}
data_dir <- file.path(db_dir, "Data")
ntl_dir  <- file.path(data_dir, "Nighttime Lights")
gadm_dir <- file.path(data_dir, "GADM")
dw_dir   <- file.path(data_dir, "Land Cover - Dynamic World")
pslm_dir <- file.path(data_dir, "PSLM")
hex_dir  <- file.path(data_dir, "hexagons")
#### Output paths
figures_dir <- file.path(db_dir, "Outputs", "figures")
tables_dir  <- file.path(db_dir, "Outputs", "tables")
# Packages ---------------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(blackmarbler)
library(sf)
library(rgee)
library(geodata)
library(exactextractr)
library(reticulate)
library(rgee)
library(raster)
library(rgdal)
# Load data --------------------------------------------------------------------
file.path(data_dir)
