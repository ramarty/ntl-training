---
title: "Nighttime Lights Analysis with BlackMarbleR Package"
author: "ieConnect"
date: "10/07/2024"
format:
  html:
    toc: true
    code-fold: false
    code-link: true
knitr:
  opts_chunk:
    warning: false
    message: false
editor_options: 
  chunk_output_type: inline
---

This tutorial provides an introduction to using NASA Black Marble nighttime lights data for analysis. The tutorial leverages the BlackMarbleR R package.

_The hidden code chunk below downloads the data for this tutorial._
```{r}
#| code-fold: true

# Download data

#### Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(geodata)
library(osmdata)
library(leaflet)
library(blackmarbler)
library(DT)
library(janitor)
library(readxl)

#### Kenya ADM 0
COUNTRY_OUT <- here("data", "kenya_adm0.geojson")

if(!file.exists(COUNTRY_OUT)){
  ken_1_sf <- gadm("KEN", level=0, path = tempdir()) %>% st_as_sf()
  ken_1_sf <- ken_1_sf %>% st_simplify(dTolerance = 60)
  ken_1_sf <- ken_1_sf %>%
    select(COUNTRY)
  
  st_write(ken_1_sf, COUNTRY_OUT, delete_dsn = T)
}

#### Kenya ADM 1
COUNTRY_OUT <- here("data", "kenya_adm1.geojson")

if(!file.exists(COUNTRY_OUT)){
  ken_1_sf <- gadm("KEN", level=1, path = tempdir()) %>% st_as_sf()
  ken_1_sf <- ken_1_sf %>% st_simplify(dTolerance = 60)
  ken_1_sf <- ken_1_sf %>%
    select(NAME_1)
  
  st_write(ken_1_sf, COUNTRY_OUT, delete_dsn = T)
}

#### Nigeria ADM 0
COUNTRY_OUT <- here("data", "nigeria_adm0.geojson")

if(!file.exists(COUNTRY_OUT)){
  ken_1_sf <- gadm("NGA", level=0, path = tempdir()) %>% st_as_sf()
  ken_1_sf <- ken_1_sf %>% st_simplify(dTolerance = 60)
  ken_1_sf <- ken_1_sf %>%
    select(COUNTRY)
  
  st_write(ken_1_sf, COUNTRY_OUT, delete_dsn = T)
}

#### Nigeria ADM 1
COUNTRY_OUT <- here("data", "nigeria_adm1.geojson")

if(!file.exists(COUNTRY_OUT)){
  ken_1_sf <- gadm("NGA", level=1, path = tempdir()) %>% st_as_sf()
  ken_1_sf <- ken_1_sf %>% st_simplify(dTolerance = 60)
  ken_1_sf <- ken_1_sf %>%
    select(NAME_1)
  
  st_write(ken_1_sf, COUNTRY_OUT, delete_dsn = T)
}


#### Puerto Rico: ADM 1
COUNTRY_OUT <- here("data", "puero_rico_adm0.geojson")

if(!file.exists(COUNTRY_OUT)){
  pr_0_sf <- gadm("PRI", level=0, path = tempdir()) %>% st_as_sf()
  pr_0_sf <- pr_0_sf %>%
    select(COUNTRY)
  pr_0_sf <- pr_0_sf %>% st_simplify(dTolerance = 60)
  
  st_write(pr_0_sf, COUNTRY_OUT, delete_dsn = T)
}

#### Puerto Rico: ADM 0
COUNTRY_OUT <- here("data", "puero_rico_adm1.geojson")

if(!file.exists(COUNTRY_OUT)){
  pr_1_sf <- gadm("PRI", level=1, path = tempdir()) %>% st_as_sf()
  pr_1_sf <- pr_1_sf %>%
    select(NAME_1)
  pr_1_sf <- pr_1_sf %>% st_simplify(dTolerance = 60)
  
  st_write(pr_1_sf, COUNTRY_OUT, delete_dsn = T)
}

#### Gas Flaring

## Download data
# https://datacatalog.worldbank.org/search/dataset/0037743
if(!file.exists(here("gas_flaring", "rawdata", "viirs_global_flaring_2017.xlsx"))){
  download.file(url = "https://datacatalogfiles.worldbank.org/ddh-published/0037743/DR0045623/viirs_global_flaring_d.7_slope_0.029353_2017_web_v1.xlsx?versionId=2023-01-18T20:03:32.2273754Z", 
                destfile = here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2017.xlsx"), 
                mode = "wb")
}

if(!file.exists(here("gas_flaring", "rawdata", "viirs_global_flaring_2018.xlsx"))){
  download.file(url = "https://datacatalogfiles.worldbank.org/ddh-published/0037743/DR0045622/viirs_global_flaring_d.7_slope_0.029353_2018_web.xlsx?versionId=2023-01-18T20:02:43.3965005Z", 
                destfile = here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2018.xlsx"), 
                mode = "wb")
}

if(!file.exists(here("gas_flaring", "rawdata", "viirs_global_flaring_2019.xlsx"))){
  download.file(url = "https://datacatalogfiles.worldbank.org/ddh-published/0037743/DR0045621/viirs_global_flaring_d.7_slope_0.029353_2019_web_v20201114-3.xlsx?versionId=2023-01-18T20:03:09.2456111Z", 
                destfile = here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2019.xlsx"), 
                mode = "wb")
}

if(!file.exists(here("gas_flaring", "rawdata", "viirs_global_flaring_2020.xlsx"))){
  download.file(url = "https://datacatalogfiles.worldbank.org/ddh-published/0037743/DR0084248/2020%20Global%20Gas%20Flaring%20Volumes.xlsx?versionId=2023-01-18T20:03:53.8309309Z", 
                destfile = here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2020.xlsx"), 
                mode = "wb")
}

if(!file.exists(here("gas_flaring", "rawdata", "viirs_global_flaring_2021.xlsx"))){
  download.file(url = "https://datacatalogfiles.worldbank.org/ddh-published/0037743/DR0087112/2021%20Global%20Gas%20Flaring%20Volumes.xlsx?versionId=2023-01-18T20:02:21.4951166Z", 
                destfile = here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2021.xlsx"), 
                mode = "wb")
}

#### Append data
iso3_code <- "NGA"

clean_data <- function(x){
  x %>% 
    clean_names() %>% 
    dplyr::filter(iso_code %in% iso3_code)
} 

df_2021 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2021.xlsx"), 2) %>% clean_data()

df_2020_1 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2020.xlsx"), 1) %>% clean_data()
df_2020_2 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2020.xlsx"), 2) %>% clean_data()
df_2020_3 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2020.xlsx"), 3) %>% clean_data()

df_2019 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2019.xlsx"), 1) %>% clean_data()

df_2018_4 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2018.xlsx"), 4) %>% clean_data()
df_2018_5 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2018.xlsx"), 5) %>% clean_data()
df_2018_6 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2018.xlsx"), 6) %>% clean_data()

df_2017_1 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2017.xlsx"), 1) %>% clean_data()
df_2017_2 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2017.xlsx"), 2) %>% clean_data()
df_2017_3 <- read_xlsx(here("data", "gas_flaring", "rawdata", "viirs_global_flaring_2017.xlsx"), 3) %>% clean_data()

gs_df <- bind_rows(
  df_2021,
  df_2020_1,
  df_2020_2,
  df_2020_3,
  df_2019,
  df_2018_4,
  df_2018_5,
  df_2018_6,
  df_2017_1,
  df_2017_2,
  df_2017_3
)

gs_df <- gs_df %>%
  dplyr::select(latitude, longitude) %>%
  distinct() %>%
  dplyr::mutate(uid = 1:n())

write_csv(gs_df, here("data", "gas_flaring", "finaldata", "nga_gas_flare.csv"))

#### Nighttime Lights Token
BEARER <- read_csv("~/Dropbox/bearer_bm.csv") %>%
  pull(token)


```

# BlackMarbleR Package

## Black Marble

__Black Marble Products__

The BlackMarbleR package facilitates retrieving and working with nighttime lights data from [NASA Black Marble](https://blackmarble.gsfc.nasa.gov/). Black Marble produces a number of nighttime light products, from daily, monthly, to annual composites.

![](img/bm_products.png){fig-cap="Black Marble Products"}

__Why BlackMarbleR?__

The above image notes that produces are available via the NASA LAADS Archive. Within the archive, raw nighttime lights data are separated by (1) time and (2) tile. The below image shows a screenshot from the archive---showing raw files for January 2024.

![](img/nasa_laads.png)

In some cases, our region of interest to examine nighttime lights crosses multiple tiles. For example, 4 tiles comprise Kenya. Consequently, to examine annual trends in nighttime lights for Kenya, for each year we'd need to download 4 tiles and mosaic them together. Doing this manually can be time consuming. The `BlackMarbleR` package does this all for us.

## Package overview

The [documentation](https://github.com/worldbank/blackmarbler) for BlackMarbleR contains more extended documentation. This section provides a brief overview of functions and key inputs. 

__Functions__

The `blackmarbler` package contains two main functions:

* `bm_raster` For retrieving rasters of nighttime lights for a given region of interest
* `bm_extract` For retrieving zonal statistics (sum, mean, etc) of nighttime lights for a given region of interest.

__Required arguments__

Below are the main, required arguments to the functions:

* `roi_sf`: sf object defining region of interest (sf polygon)
* `product_id`: Black Marble product ID
  - `"VNP46A1"`: Daily (raw)
  - `"VNP46A2"`: Daily (corrected)
  - `"VNP46A3"`: Monthly
  - `"VNP46A4"`: Annual
* `date`: Date to query (can be one or multiple dates).
* `bearer`: NASA bearer token. For instructions on how to create a token, see [here](https://github.com/worldbank/blackmarbler#bearer-token-).

__Additional arguments__

Below are select optional arguments; for all arguments, see documentation [here](https://github.com/worldbank/blackmarbler).

* `variable`: The variable to use for nighttime lights. For monthly and annual data (`VNP46A3` and `VNP46A4`) the default is `"NearNadir_Composite_Snow_Free"`. 
* `quality_flag_rm`: Quality flag used to set values to `NA`. For examples using the quality variable, see [here](https://worldbank.github.io/blackmarbler/articles/assess-quality.html).
* `output_location_type`: Either `"r_memory"` or `"file"`. 
  - `"r_memory"`: Data is only load into R memory.
  - `"file"`: File (raster or dataframe) is saved locally; data is also load into R memory.
* `file_dir`: When `output_location_type = "file"`, the directory where to save the data.
* `aggregation_fun`: For `bm_extract`, a vector of functions to aggregate data (default: `"mean"`).

# Setup

Run the following code, which will download the github repo.

```{r}
#| eval: false

library(usethis)
use_course(url = "https://github.com/ramarty/ntl-training/archive/main.zip")
```

For the exercises, load the following packages and define your BEARER token.

```{r}
#| eval: false

library(tidyverse)     # R workhorse
library(blackmarbler)  # Query Black Marble data
library(terra)         # Working with raster data
library(tidyterra)     # Additional functions for working with rasters
library(exactextractr) # Raster zonal stats
library(leaflet)       # Interactive maps
library(here)          # Simply finding files
library(WDI)           # Query WDI data

BEARER <- "DEFINE-BEARER-TOKEN-HERE"
```

# Nighttime lights rasters: bm_raster

## Quick Start

### Query 1 Raster

Let's query a raster of nighttime lights in Kenya.

The below code, and all code for this tutorial, sets `output_location_type = "file"` and defines the directory using `file_dir`.

* When `output_location_type = "file"`, the functions check whether data have already been queried. If data have been queried, the functions don't re-download data from the NASA LAADS Archive.
* When `output_location_type = "r_memory"`, the function always queries data from the NASA LAADS Archive.
* The tutorial uses `output_location_type = "file"` as querying data can take a little time; in additional, occasionally the NASA LAADS Archive can be down. Consequently, for the sake of the tutorial, `output_location_type` is set to `"file"` to use data already queried. 

```{r}
#| message: false
#| warning: false

ken_sf <- st_read(here("data", "kenya_adm1.geojson"), quiet = T)

r <- bm_raster(roi_sf = ken_sf, 
               product_id = "VNP46A4",
               date = 2023,
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))

## Print
r

## Plot
plot(r)
```

### Query multiple rasters

Instead of querying data for 1 year, lets query data for multiple years.

```{r}
#| message: false
#| warning: false

r <- bm_raster(roi_sf = ken_sf, 
               product_id = "VNP46A4",
               date = 2020:2023,
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))

## Print
r

## Plot
plot(r)
```

## Exercise: Make Better Maps of Rasters

__Simple:__ 

1. Make a map of 2023 nighttime lights in __Kenya__ using ggplot, including just nighttime lights in Kenya. (Note that the raster includes areas a bit beyond Kenya).

2. Make a map of 2023 nighttime lights in __Nairobi__ using ggplot, including just nighttime lights in Kenya.

__Advanced:__

* Make interactive maps of 2023 nighttime lights in (1) Kenya and (2) Nairobi.

__Hints:__

* For static maps, in ggplot, use `geom_spatraster` from the `tidyterra` package.
* To restrict raster to Kenya's borders, crop and mask the raster.

__Initial Code Setup:__

```{r}
#| eval: false

## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(tidyterra)
library(leaflet)
library(blackmarbler)

## Load data
ken_sf <- st_read(here("data", "kenya_adm1.geojson"), quiet = T)

## Extract NTL
r <- bm_raster(..., # ADD CODE HERE
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))

## Make Map

# CODE HERE
```

__Simple solution__

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(tidyterra)
library(leaflet)
library(blackmarbler)

## Load data
ken_sf <- st_read(here("data", "kenya_adm1.geojson"), quiet = T)

## Extract NTL
r <- bm_raster(roi_sf = ken_sf, 
               product_id = "VNP46A4",
               date = 2020:2023,
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))

#### Kenya
r_ken <- r %>% crop(ken_sf) %>% mask(ken_sf)

ggplot() +
  geom_spatraster(data = r_ken) +
  scale_fill_gradientn(colors = c("black", "yellow", "red"), 
                       na.value = "white") +
  labs(fill = "NTL") +
  theme_void()
```

```{r}
#| message: false
#| warning: false
#| echo: fenced

#### Nairobi
nbo_sf <- ken_sf %>%
  filter(NAME_1 == "Nairobi")

r_nbo <- r %>% crop(nbo_sf) %>% mask(nbo_sf)

ggplot() +
  geom_spatraster(data = r_nbo) +
  scale_fill_gradientn(colors = c("black", "yellow", "red"), 
                       na.value = "white") +
  labs(fill = "NTL") +
  theme_void()
```

</details>

__Advanced solution__

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

# Crop and mask the raster to Kenya's boundaries
r_ken <- r %>% crop(ken_sf) %>% mask(ken_sf)

# Define a color palette from black to yellow to red
color_pal <- colorNumeric(palette = c("black", "yellow", "red"), 
                          domain = values(r_ken), 
                          na.color = "transparent")

# Create the leaflet map
leaflet() %>%
  addProviderTiles("CartoDB.Positron") %>%
  addRasterImage(r_ken, 
                 colors = color_pal, 
                 opacity = 0.8) %>%
  addLegend(pal = color_pal, 
            values = values(r_ken), 
            title = "NTL", 
            position = "bottomright")
```

```{r}
#| message: false
#| warning: false
#| echo: fenced

#### Nairobi
nbo_sf <- ken_sf %>%
  filter(NAME_1 == "Nairobi")

r_nbo <- r %>% crop(nbo_sf) %>% mask(nbo_sf)

# Define a color palette from black to yellow to red
color_pal <- colorNumeric(palette = c("black", "yellow", "red"), 
                          domain = values(r_nbo), 
                          na.color = "transparent")

# Create the leaflet map
leaflet() %>%
  addProviderTiles("CartoDB.Positron") %>%
  addRasterImage(r_nbo, 
                 colors = color_pal, 
                 opacity = 0.8) %>%
  addLegend(pal = color_pal, 
            values = values(r_nbo), 
            title = "NTL", 
            position = "bottomright")
```

</details>

## Exercise: Zonal Stats of Raster

Extract the sum of 2023 nighttime lights within each administrative division. Make of map of nighttime lights, which shows the sum of nighttime lights within each administrative division. 

__Hint:__ Use the `exact_extract` function to take the sum of nighttime lights within administrative divisions.

```{r}
#| eval: false

## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(tidyterra)
library(leaflet)
library(blackmarbler)
library(exactextractr)

## Load data
ken_sf <- st_read(here("data", "kenya_adm1.geojson"), quiet = T)

## Extract NTL
r <- bm_raster(roi_sf = ken_sf,
               product_id = "VNP46A4",
               date = 2023,
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))
```

__Solution__

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(tidyterra)
library(leaflet)
library(blackmarbler)
library(exactextractr)

## Load data
ken_sf <- st_read(here("data", "kenya_adm1.geojson"), quiet = T)

## Extract NTL
r <- bm_raster(roi_sf = ken_sf,
               product_id = "VNP46A4",
               date = 2023,
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))

## Zonal Stats
ken_sf$ntl_sum <- exact_extract(r, ken_sf, "sum", progress = F)

## Map
ggplot() +
  geom_sf(data = ken_sf,
          aes(fill = ntl_sum)) +
  scale_fill_gradientn(colors = c("black", "yellow", "red"), 
                       na.value = "white") +
  labs(fill = "NTL") +
  theme_void()
```

</details>

## Exercise: Nighttime lights in and excluding gas flaring locations

In this exercise, we'll examine the sum of nighttime near and excluding gas flaring locations in Nigeria. Part 1 (load and prepping data), part 2 (making a map of NTL with gas flaring locations) are shown below. The exercise for you to complete is part 3: determining the proportion of lights within 10km of gas flaring locations.

### Part 1: Load and prep data

```{r}

## Load packages
library(tidyverse)
library(sf)
library(blackmarbler)
library(ggplot2)

## Load Nigeria polygon
nga_sf <- st_read(here("data", "nigeria_adm0.geojson"), quiet = T)

## Query NTL in 2023
r <- bm_raster(roi_sf = nga_sf,
               product_id = "VNP46A4",
               date = 2023,
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "nigeria", "raster"))

## Load and prep gas flares
gf_df <- read_csv(here("data", "gas_flaring", "finaldata", "nga_gas_flare.csv"))

gf_sf <- gf_df %>% 
  st_as_sf(coords = c("longitude", "latitude"), 
           crs = 4326) %>%
  st_buffer(dist = 10*1000)

head(gf_sf)
```

### Part 2: Map of gas flaring locations

```{r}
## Restrict NTL raster to Nigeria
r <- r %>% crop(nga_sf) %>% mask(nga_sf)

gf_u_sf <- gf_sf %>%
  st_union()

ggplot() +
  geom_spatraster(data = log(r+1)) +
  geom_sf(data = gf_u_sf,
          aes(color = "Gas Flaring"),
          fill = NA) +
  scale_fill_gradientn(colors = c("black", "yellow", "red"), 
                       na.value = "white") +
  scale_color_manual(values = "blue") +
  labs(fill = "NTL\n(logged)",
       color = NULL) +
  theme_void()
```

### Part 3: Sum of lights in/excluding gas flaring locations

Determine the sum of lights (1) within 10km of gas flaring locations and (2) excluding 10km of gas flaring locations. What is the proportion of total lights within 10km of gas flaring locations?

__Hint:__ From the terra package, the `mask()` and `mask(..., inverse = T)` functions will be helpful.

<details>
<summary>Click to see solution</summary>

```{r}
## Mask
r_gf   <- r %>% mask(gf_sf)
r_nogf <- r %>% mask(gf_sf, inverse = T)

## Plot to check mask
plot(r_nogf)
plot(r_gf)

## Calculate sum of lights
ntl_excl_gasflare <- exact_extract(r_nogf, nga_sf, "sum", progress = F)
ntl_gasflare      <- exact_extract(r_gf,   nga_sf, "sum", progress = F)

cat("NTL Excluding Gas Flaring Locations:", 
    ntl_excl_gasflare)
cat("NTL Within Gas Flaring Locations:", 
    ntl_gasflare)
cat("Prop. of NTL within 10km of Gas Flaring Locations:", 
    (ntl_gasflare + ntl_excl_gasflare))
```

</details>

# Nighttime zonal stats: bm_extract

## Overview

The previous example shows downloading a raster using `bm_raster`, then using `exact_extract` to calculate the sum of nighttime lights within a raster. The `bm_extract` function simplifies this process by both quering raster data and computing the zonal stats---outputting a dataframe. In short `bm_extract` avoids having to work with raster data.

The below code shows an example of using `bm_extract` to compute the sum of nighttime lights within Kenya's ADM 1 from 2012 to 2023.

```{r}
#| message: false
#| warning: false

## Load data
ken_sf <- st_read(here("data", "kenya_adm1.geojson"), quiet = T)

## Extract NTL
ntl_df <- bm_extract(roi_sf = ken_sf,
                     product_id = "VNP46A4",
                     date = 2012:2023,
                     bearer = BEARER,
                     aggregation_fun = "sum",
                     
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "kenya", "extracts", "adm1"))

ntl_df %>%
  DT::datatable()
```

The resulting datafrom contains a few different variables produced by `bm_extract`:

* `ntl_sum`: The sum of nighttime lights
* `n_pixels`: The total number of pixels within the administrative unit.
* `n_non_na_pixels`: The total number of pixels with a non-NA value of nighttime lights within the administrative unit (NA values could occur due to cloud cover, for example).
* `prop_non_na_pixels`: Proportion of non-NA nighttime light values within the unit.

## Exercise: Nighttime lights and GDP

Part 1: Extract the sum of nighttime lights in Kenya from 2012 to 2023, extracting both `NearNadir_Composite_Snow_Free` and `OffNadir_Composite_Snow_Free` (you'll need to make two separate `bm_extract` calls). Plot a scatterplot of these variables.

Part 2: What is the correlation between GDP and nighttime lights (testing both near- and off-nadir). Show trends in both nighttime light variables and GDP.

__Code Setup__
```{r}
#| eval: false

## Load packages
library(tidyverse)
library(sf)
library(blackmarbler)
library(here)
library(WDI)

## Kenya ADM boundaries
ken_sf <- st_read(here("data", "kenya_adm0.geojson"), quiet = T)

## Query GDP for Kenya from 2012 to 2023
kenya_gdp_df <- WDI(
  country = "KE",
  indicator = "NY.GDP.MKTP.CD",
  start = 2012,
  end = 2023
)
```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false

## Load packages
library(tidyverse)
library(sf)
library(blackmarbler)
library(here)
library(WDI)

## Kenya ADM boundaries
ken_sf <- st_read(here("data", "kenya_adm0.geojson"), quiet = T)

## Query GDP for Kenya from 2012 to 2023
kenya_gdp_df <- WDI(
  country = "KE",
  indicator = "NY.GDP.MKTP.CD",
  start = 2012,
  end = 2023
)

# Part 1: Compare Near/Off-Nadir -----------------------------------------------

## Off-Nadir NTL
ntl_offnadir_df <- bm_extract(roi_sf = ken_sf,
                              product_id = "VNP46A4",
                              date = 2012:2023,
                              bearer = BEARER,
                              aggregation_fun = "sum",
                              variable = "OffNadir_Composite_Snow_Free",
                              
                              output_location_type = "file",
                              file_dir = here("data", "ntl_blackmarble", "kenya", "extracts", "adm0"))

ntl_offnadir_df <- ntl_offnadir_df %>%
  dplyr::select(date, ntl_sum) %>%
  dplyr::rename(ntl_sum_offnadir = ntl_sum)

## Near-Nadir NTL
ntl_nearnadir_df <- bm_extract(roi_sf = ken_sf,
                               product_id = "VNP46A4",
                               date = 2012:2023,
                               bearer = BEARER,
                               aggregation_fun = "sum",
                               variable = "NearNadir_Composite_Snow_Free",
                               
                               output_location_type = "file",
                               file_dir = here("data", "ntl_blackmarble", "kenya", "extracts", "adm0"))

ntl_nearnadir_df <- ntl_nearnadir_df %>%
  dplyr::select(date, ntl_sum) %>%
  dplyr::rename(ntl_sum_nearnadir = ntl_sum)

## Merge Near- and Off-Nadir
ken_ntl_df <- ntl_nearnadir_df %>%
  left_join(ntl_offnadir_df, by = "date") 

## Scatterplot
ken_ntl_df %>%
  ggplot() +
  geom_point(aes(x = ntl_sum_nearnadir,
                 y = ntl_sum_offnadir))

# Part 2: Compare GDP ----------------------------------------------------------

## Merge NTL with GDP
ken_gdp_ntl_df <- kenya_gdp_df %>%
  left_join(ken_ntl_df, by = c("year" = "date")) 

## Correlation
cor.test(ken_gdp_ntl_df$ntl_sum_nearnadir, ken_gdp_ntl_df$NY.GDP.MKTP.CD)
cor.test(ken_gdp_ntl_df$ntl_sum_offnadir, ken_gdp_ntl_df$NY.GDP.MKTP.CD)

## Trends in GDP & NTL
ken_gdp_ntl_df %>%
  dplyr::select(c(year, NY.GDP.MKTP.CD, 
                  ntl_sum_nearnadir, ntl_sum_offnadir)) %>%
  pivot_longer(cols = -year) %>%
  mutate(name = case_when(
    name == "NY.GDP.MKTP.CD" ~ "GDP (Current US$)",
    name == "ntl_sum_nearnadir" ~ "NTL: Near Nadir",
    name == "ntl_sum_offnadir" ~ "NTL: Off Nadir"
  )) %>%
  ggplot() +
  geom_line(aes(x = year,
                y = value)) +
  facet_wrap(~name,
             scales = "free_y") +
  labs(x = NULL,
       y = "Value") +
  theme_classic()
```

</details>

## Exercise: Nighttime light reduction from Hurricane Maria

On September 20, 2017, [Hurricane Maria](https://en.wikipedia.org/wiki/Hurricane_Maria)---then a category 4 hurricane---struck Puerto Rico, killing an estimate 3,000 people and leaving significant damage. In this exercise, we'll use nighttime lights to understand earthquake damages & recovery. This exercise has four parts.

### Part 1: Monthly Trends

Make a figure that shows total monthly nighttime lights in Puerto Rico from January 2017 to December 2018.

__Code Setup__

```{r}
#| eval: false

## Load packages
library(tidyverse)
library(sf)
library(blackmarbler)
library(ggplot2)

## Load Puerto Rico polygon
pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

## Extract data
ntl_df <- bm_extract(...,
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm0"))
```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

library(tidyverse)
library(sf)
library(blackmarbler)
library(ggplot2)

pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

ntl_df <- bm_extract(roi_sf = pr_sf,
                     product_id = "VNP46A3",
                     date = seq.Date(from = ymd("2017-01-01"), 
                                     to = ymd("2018-12-01"), 
                                     by = "month"),
                     bearer = BEARER,
                     aggregation_fun = "sum",
                     
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm0"))

ntl_df %>%
  ggplot() +
  geom_vline(xintercept = ymd("2017-09-01")) +
  geom_col(aes(x = date,
               y = ntl_sum),
           fill = "darkorange") +
  labs(x = NULL,
       y = "NTL Radiance",
       title = "Puerto Rico nighttime lights before and after hurricane Maria") +
  theme_classic() +
  theme(plot.title = element_text(face = "bold"))
```

</details>


### Part 2: Daily Trends

Let's see if we can use the data to understand daily trends in nighttime lights. Use `bm_extract` to extract the daily sum of nighttime nighttime lights in the days before and after the hurricane hit: September 15, 2017 through September 25, 2017. Make two figures:

1. Showing daily sum of nighttime lights
2. Daily number of non-NA pixels across the country

Based on these figures, can we rely on daily nighttime lights to observe immediate damages of the earthquake?

__Hints__

1. Because we're using daily nighttime lights, the product ID will be: `"VNP46A2"`
2. For product ID `"VNP46A2"`, `bm_extract`/`bm_raster` by default uses `variable = "Gap_Filled_DNB_BRDF-Corrected_NTL"`. This variable fills gaps in daily value (eg, when there is cloud cover) using observations from other days. For this exercise, we're interested in the actual daily values (ie, non-gap filled). Consequently, use variable: `DNB_BRDF-Corrected_NTL`.
3. Let's remove low-quality pixels where there could be cloud contamination; for this, set `quality_flag_rm` to `2`.

__Code Setup__

```{r}
#| eval: false

## Load packages
library(tidyverse)
library(sf)
library(blackmarbler)

## Load Puerto Rico polygon
pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

## Extract data
ntl_df <- bm_extract(...,
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm0"))
```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

library(tidyverse)
library(sf)
library(blackmarbler)

pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

ntl_df <- bm_extract(roi_sf = pr_sf,
                     product_id = "VNP46A2",
                     date = seq.Date(from = ymd("2017-09-15"), 
                                     to = ymd("2017-09-25"), 
                                     by = "day"),
                     bearer = BEARER,
                     aggregation_fun = "sum",
                     variable = "DNB_BRDF-Corrected_NTL",
                     quality_flag_rm = 2,
                     
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm0"))

ntl_df %>%
  dplyr::select(COUNTRY, date, ntl_sum, prop_non_na_pixels) %>%
  pivot_longer(cols = c(ntl_sum, prop_non_na_pixels)) %>%
  dplyr::mutate(name_clean = case_when(
    name == "ntl_sum" ~ "NTL: Sum",
    name == "prop_non_na_pixels" ~ "Prop Non-NA Pixels"
  )) %>%
  ggplot() +
  geom_vline(xintercept = ymd("2017-09-20"),
             color = "red") +
  geom_col(aes(x = date,
               y = value)) +
  labs(x = "Day",
       y = "Value") +
  facet_wrap(~name_clean,
             scales = "free_y") +
  theme_classic()
```

</details>

### Part 3: Damage Assessment - ADM 1 level

Create a map that shows the percent change in nighttime lights at the ADM1 level, comparing September 2017 and October 2017.

__Code Setup__

```{r}
#| eval: false

## Load packages
library(tidyverse)
library(sf)
library(blackmarbler)

## Load Puerto Rico ADM1 polygon
pr_sf <- read_sf(here("data", "puero_rico_adm1.geojson"))

## Extract data
ntl_df <- bm_extract(...,
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm1"))
```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

library(tidyverse)
library(sf)
library(blackmarbler)

pr_sf <- read_sf(here("data", "puero_rico_adm1.geojson"))

ntl_df <- bm_extract(roi_sf = pr_sf,
                     product_id = "VNP46A3",
                     date = seq.Date(from = ymd("2017-09-01"), 
                                     to = ymd("2017-10-01"), 
                                     by = "month"),
                     bearer = BEARER,
                     aggregation_fun = "sum",
                     
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm1"))

ntl_pc_df <- ntl_df %>%
  pivot_wider(id_cols = NAME_1,
              values_from = ntl_sum,
              names_from = date) %>%
  mutate(pc = (`2017-10-01` - `2017-09-01`) / `2017-09-01` * 100)

pr_ntl_sf <- pr_sf %>%
  left_join(ntl_pc_df, by = "NAME_1")

pr_ntl_sf %>%
  ggplot() +
  geom_sf(aes(fill = pc)) +
  theme_void() +
  scale_fill_gradient(low = "red", high = "white") +
  labs(fill = "% Change",
       title = "% Change in NTL from Sept to Oct 2017")
```

</details>

### Part 4: Damage Assessment - Pixel level

Create a map at the pixel level that shows which pixels experienced an (1) increase (green), (2) decrease (red), or (3) no change (blue) in nighttime lights from September 2017 to October 2017.

__Notes:__

1. Let's only consider changes above a value of 1, so a pixel experienced an increase in lights if the change was above 1.
2. Only show pixels that had some baseline level of nighttime lights. Specifically, if a pixel had a value near 0 in September and near 0 in October, the change value should be `NA`---we don't classify this as "no change."

__Code Setup__

```{r}
#| eval: false

## Load packages
library(tidyverse)
library(sf)
library(blackmarbler)

## Load Puerto Rico polygon
pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

## Extract data
r <- bm_raster(...,
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "puerto_rico", "raster"))
```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

library(tidyverse)
library(tidyterra)
library(blackmarbler)

pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

r <- bm_raster(roi_sf = pr_sf,
               product_id = "VNP46A3",
               date = seq.Date(from = ymd("2017-09-01"), 
                               to = ymd("2017-10-01"), 
                               by = "month"),
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "puerto_rico", "raster"))

## Grab raster for each month
r_sep <- r[[1]]
r_oct <- r[[2]]

r_category <- r_sep
r_category[] <- NA
r_category[(r_sep > 1)] <- 0
r_category[(r_oct - r_sep) > 1]  <- 1
r_category[(r_oct - r_sep) < -1] <- -1

# Numeric now, which will be translated to a continuous scale. However,
# we want 3 distinct categories - so make character.
r_category[] <- r_category[] %>% as.character()

ggplot() +
  geom_spatraster(data = r_category, aes(fill = t2017_09)) +
  scale_fill_manual(
    values = c("-1" = "red", "0" = "dodgerblue", "1" = "green"),
    labels = c("-1" = "Decrease", "0" = "No change", "1" = "Increase"),
    name = "Change",
    na.value = "white"
  ) +
  theme_void() +
  labs(title = "Change in nighttime lights from Sept to Oct 2017")
```

</details>



