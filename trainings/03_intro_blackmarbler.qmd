---
title: "Nighttime Lights"
author: "ieConnect"
date: "10/07/2024"
format:
  html:
    toc: true
    code-fold: false
    code-link: true
knitr:
  opts_chunk:
    warning: false
    message: false
editor_options: 
  chunk_output_type: inline
---

_The hidden code chunk below downloads the data for this tutorial._
```{r}
#| code-fold: true

# Download data

#### Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(geodata)
library(osmdata)
library(leaflet)
library(blackmarbler)
library(DT)

#### Kenya ADM 0
COUNTRY_OUT <- here("data", "kenya_adm0.geojson")

if(!file.exists(COUNTRY_OUT)){
  ken_1_sf <- gadm("KEN", level=0, path = tempdir()) %>% st_as_sf()
  ken_1_sf <- ken_1_sf %>% st_simplify(dTolerance = 60)
  ken_1_sf <- ken_1_sf %>%
    select(COUNTRY)
  
  st_write(ken_1_sf, COUNTRY_OUT, delete_dsn = T)
}

#### Kenya ADM 1
COUNTRY_OUT <- here("data", "kenya_adm1.geojson")

if(!file.exists(COUNTRY_OUT)){
  ken_1_sf <- gadm("KEN", level=1, path = tempdir()) %>% st_as_sf()
  ken_1_sf <- ken_1_sf %>% st_simplify(dTolerance = 60)
  ken_1_sf <- ken_1_sf %>%
    select(NAME_1)
  
  st_write(ken_1_sf, COUNTRY_OUT, delete_dsn = T)
}

#### Puerto Rico: ADM 1
COUNTRY_OUT <- here("data", "puero_rico_adm0.geojson")

if(!file.exists(COUNTRY_OUT)){
  pr_0_sf <- gadm("PRI", level=0, path = tempdir()) %>% st_as_sf()
  pr_0_sf <- pr_0_sf %>%
    select(COUNTRY)
  pr_0_sf <- pr_0_sf %>% st_simplify(dTolerance = 60)
  
  st_write(pr_0_sf, COUNTRY_OUT, delete_dsn = T)
}

#### Puerto Rico: ADM 0
COUNTRY_OUT <- here("data", "puero_rico_adm1.geojson")

if(!file.exists(COUNTRY_OUT)){
  pr_1_sf <- gadm("PRI", level=1, path = tempdir()) %>% st_as_sf()
  pr_1_sf <- pr_1_sf %>%
    select(NAME_1)
  pr_1_sf <- pr_1_sf %>% st_simplify(dTolerance = 60)
  
  st_write(pr_1_sf, COUNTRY_OUT, delete_dsn = T)
}

#### Nighttime Lights
BEARER <- read_csv("~/Dropbox/bearer_bm.csv") %>%
  pull(token)
```

# BlackMarbleR Package

## Black Marble

The BlackMarbleR package facilitates retrieving and working with nighttime lights data from [NASA Black Marble](https://blackmarble.gsfc.nasa.gov/). Black Marble produces a number of nighttime light products, from daily, monthly, to annual composites.

![](img/bm_products.png)
The above image notes that produces are available via the NASA LAADS Archive. Within the archive, raw nighttime lights data are seprated by (1) time and (2) tile. In some cases, our region of interest to examine nighttime lights crosses multiple tiles. For example, 4 tiles comprise Kenya. Consequently, to examine annual trends in nighttime lights for Kenya, for each year we'd need to download 4 tiles and mosaic them together. Doing this manually can be time consuming. The `BlackMarbleR` package does this all for us.

![](img/nasa_laads.png)

## Black Marble: R Package

The `blackmarbler` package contains two main functions:

* `bm_raster` For retrieving rasters of nighttime lights for a given region of interest
* `bm_extract` For retrieving zonal statistics (sum, mean, etc) of nighttime lights for a given region of interest.

Below are the main, required arguments to the functions:

* `roi_sf`: sf object defining region of interest
* `product_id`: Black Marble product ID
- `"VNP46A1"`: Daily (raw)
- `"VNP46A2"`: Daily (corrected)
- `"VNP46A3"`: Monthly
- `"VNP46A4"`: Annual
* `date`: Date of raster data (either one or multiple).
* `bearer`: NASA bearer token. For instructions on how to create a token, see [here](https://github.com/worldbank/blackmarbler#bearer-token-).

Below are select optional arguments

* `variable`: The variable to use for nighttime lights.
* `quality_flag_rm`: Quality flag used to set values to NA.

For examples assessing the quality of nighttime lights, see [here](https://worldbank.github.io/blackmarbler/articles/assess-quality.html).

# Setup

We'll work with three main package

```{r}
library(blackmarbler)
library(terra)
library(tidyterra)
library(exactextractr)
```

```{r}
ken_sf <- st_read(here("data", "kenya_adm1.geojson"))
```

# Nighttime rasters: bm_raster

```{r}
ken_sf <- st_read(here("data", "kenya_adm1.geojson"))

r <- bm_raster(roi_sf = ken_sf,
               product_id = "VNP46A4",
               date = 2023,
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))

r
```

## Exercise: Make Map

```{r}
#| eval: false

## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(tidyterra)
library(leaflet)
library(blackmarbler)

## Load data
ken_sf   <- st_read(here("data", "kenya_adm1.geojson"))

## Extract NTL
r <- bm_raster(roi_sf = ken_sf,
               product_id = "VNP46A4",
               date = 2023,
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))
```

__Simple:__ 

1. Make a map of nighttime lights in __Kenya__ using ggplot, including just nighttime lights in Kenya. (Note that the raster includes areas a bit beyond Kenya).

2. Make a map of nighttime lights in __Nairobi__ using ggplot, including just nighttime lights in Kenya.

__Advanced:__

* Make interactive maps of nighttime lights in (1) Kenya and (2) Nairobi.

__Hint:__ Within `bm_raster`, use the following code to avoid re-downloading data:

```r
bm_raster(...,
output_location_type = "file",
file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))
```

__Simple solution__

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

#### Kenya
r_ken <- r %>% crop(ken_sf) %>% mask(ken_sf)

ggplot() +
  geom_spatraster(data = r_ken) +
  scale_fill_gradientn(colors = c("black", "yellow", "red"), 
                       na.value = "white") +
  labs(fill = "NTL") +
  theme_void()
```

```{r}
#| message: false
#| warning: false
#| echo: fenced

#### Nairobi
nbo_sf <- ken_sf %>%
  filter(NAME_1 == "Nairobi")

r_nbo <- r %>% crop(nbo_sf) %>% mask(nbo_sf)

ggplot() +
  geom_spatraster(data = r_nbo) +
  scale_fill_gradientn(colors = c("black", "yellow", "red"), 
                       na.value = "white") +
  labs(fill = "NTL") +
  theme_void()
```

</details>

__Advanced solution__

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

# Crop and mask the raster to Kenya's boundaries
r_ken <- r %>% crop(ken_sf) %>% mask(ken_sf)

# Define a color palette from black to yellow to red
color_pal <- colorNumeric(palette = c("black", "yellow", "red"), 
                          domain = values(r_ken), 
                          na.color = "transparent")

# Create the leaflet map
leaflet() %>%
  addProviderTiles("CartoDB.Positron") %>%
  addRasterImage(r_ken, 
                 colors = color_pal, 
                 opacity = 0.8) %>%
  addLegend(pal = color_pal, 
            values = values(r_ken), 
            title = "NTL", 
            position = "bottomright")
```

```{r}
#| message: false
#| warning: false
#| echo: fenced

#### Nairobi
nbo_sf <- ken_sf %>%
  filter(NAME_1 == "Nairobi")

r_nbo <- r %>% crop(nbo_sf) %>% mask(nbo_sf)

# Define a color palette from black to yellow to red
color_pal <- colorNumeric(palette = c("black", "yellow", "red"), 
                          domain = values(r_nbo), 
                          na.color = "transparent")

# Create the leaflet map
leaflet() %>%
  addProviderTiles("CartoDB.Positron") %>%
  addRasterImage(r_nbo, 
                 colors = color_pal, 
                 opacity = 0.8) %>%
  addLegend(pal = color_pal, 
            values = values(r_nbo), 
            title = "NTL", 
            position = "bottomright")
```

</details>

## Exercise: Extract NTL

Extract the sum of nighttime lights within each administrative division. Make of map of nighttime lights, which shows the sum of nighttime lights within each administrative division. 


__Hints:__ 

1. Use the `exact_extract` function to take the sum of nighttime lights within administrative divisions.
2. Within `bm_raster`, use the following code to avoid re-downloading data:

```r
bm_raster(...,
output_location_type = "file",
file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))
```

```{r}
#| eval: false

## Load packages
library(tidyverse)
library(here)
library(sf)
library(terra)
library(tidyterra)
library(leaflet)
library(blackmarbler)
library(exactextractr)

exact_extract(r, ken_sf, "sum")

## Load data
ken_sf   <- st_read(here("data", "kenya_adm1.geojson"))

## Extract NTL
r <- bm_raster(roi_sf = ken_sf,
               product_id = "VNP46A4",
               date = 2023,
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "kenya", "raster"))
```

__Solution__

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

ken_sf$ntl_sum <- exact_extract(r, ken_sf, "sum")

ggplot() +
  geom_sf(data = ken_sf,
          aes(fill = ntl_sum)) +
  scale_fill_gradientn(colors = c("black", "yellow", "red"), 
                       na.value = "white") +
  labs(fill = "NTL") +
  theme_void()
```

</details>

# Nighttime zonal stats: bm_extract

The previous example shows downloading a raster using `bm_raster`, then using `exact_extract` to calculate the sum of nighttime lights within a raster. The `bm_extract` function simplifies this step by doing it for us.

The below code shows an example of using `bm_extract` to compute the sum of nighttime lights within Kenya's ADM 1 from 2012 to 2023.

```{r}
#| message: false
#| warning: false

## Load data
ken_sf <- st_read(here("data", "kenya_adm1.geojson"))

## Extract NTL
ntl_df <- bm_extract(roi_sf = ken_sf,
                     product_id = "VNP46A4",
                     date = 2012:2023,
                     bearer = BEARER,
                     aggregation_fun = "sum",
                     
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "kenya", "extracts", "adm1"))

ntl_df %>%
  DT::datatable()
```

The resulting datafrom contains a few different variables produced by `bm_extract`:

* `ntl_sum`: The sum of nighttime lights
* `n_pixels`: The total number of pixels within the administrative unit.
* `n_non_na_pixels`: The total number of pixels with a non-NA value of nighttime lights within the administrative unit (NA values could occur due to cloud cover, for example).
* `prop_non_na_pixels`: Proportion of non-NA nighttime light values within the unit.

## Exercise: Nighttime lights and GDP

Part 1: Extract the sum of nighttime lights in Kenya from 2012 to 2023. Extract both `NearNadir_Composite_Snow_Free` and `OffNadir_Composite_Snow_Free` (you'll need to make two separate `bm_extract` calls). Plot a scatterplot of these variables.

Part 2: What is the correlation between nighttime lights and GDP? Test both near and off nadir. Show trends in both nighttime light variables and GDP.


```{r}
#| eval: false

library(tidyverse)
library(sf)
library(blackmarbler)
library(here)
library(WDI) # install.packages("WDI)

ken_sf <- st_read(here("data", "kenya_adm1.geojson"))

kenya_gdp_df <- WDI(
  country = "KE",
  indicator = "NY.GDP.MKTP.CD",
  start = 2012,
  end = 2023
)
```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

library(tidyverse)
library(sf)
library(blackmarbler)
library(here)
library(WDI) # install.packages("WDI)
library(ggpubr)

ken_sf <- st_read(here("data", "kenya_adm0.geojson"))

# Part 1: Compare Near/Off-Nadir -----------------------------------------------

## NTL Data
ntl_offnadir_df <- bm_extract(roi_sf = ken_sf,
                              product_id = "VNP46A4",
                              date = 2012:2023,
                              bearer = BEARER,
                              aggregation_fun = "sum",
                              variable = "OffNadir_Composite_Snow_Free",
                              
                              output_location_type = "file",
                              file_dir = here("data", "ntl_blackmarble", "kenya", "extracts", "adm0"))

ntl_offnadir_df <- ntl_offnadir_df %>%
  dplyr::select(date, ntl_sum) %>%
  dplyr::rename(ntl_sum_offnadir = ntl_sum)

ntl_nearnadir_df <- bm_extract(roi_sf = ken_sf,
                               product_id = "VNP46A4",
                               date = 2012:2023,
                               bearer = BEARER,
                               aggregation_fun = "sum",
                               variable = "NearNadir_Composite_Snow_Free",
                               
                               output_location_type = "file",
                               file_dir = here("data", "ntl_blackmarble", "kenya", "extracts", "adm0"))

ntl_nearnadir_df <- ntl_nearnadir_df %>%
  dplyr::select(date, ntl_sum) %>%
  dplyr::rename(ntl_sum_nearnadir = ntl_sum)

## Merge
ken_ntl_df <- ntl_nearnadir_df %>%
  left_join(ntl_offnadir_df, by = "date") 

ken_ntl_df %>%
  ggplot() +
  geom_point(aes(x = ntl_sum_nearnadir,
                 y = ntl_sum_offnadir))

# Part 2: Compare GDP ----------------------------------------------------------

## WDI Data
kenya_gdp_df <- WDI(
  country = "KE",
  indicator = "NY.GDP.MKTP.CD",
  start = 2012,
  end = 2023
)

## Merge
ken_gdp_ntl_df <- kenya_gdp_df %>%
  left_join(ken_ntl_df, by = c("year" = "date")) 

## Correlation
cor.test(ken_gdp_ntl_df$ntl_sum_nearnadir, ken_gdp_ntl_df$NY.GDP.MKTP.CD)
cor.test(ken_gdp_ntl_df$ntl_sum_offnadir, ken_gdp_ntl_df$NY.GDP.MKTP.CD)

## Trends in GDP & NTL
ken_gdp_ntl_df %>%
  dplyr::select(c(year, NY.GDP.MKTP.CD, 
                  ntl_sum_nearnadir, ntl_sum_offnadir)) %>%
  pivot_longer(cols = -year) %>%
  mutate(name = case_when(
    name == "NY.GDP.MKTP.CD" ~ "GDP (Current US$)",
    name == "ntl_sum_nearnadir" ~ "NTL: Near Nadir",
    name == "ntl_sum_offnadir" ~ "NTL: Off Nadir"
  )) %>%
  ggplot() +
  geom_line(aes(x = year,
                y = value)) +
  facet_wrap(~name,
             scales = "free_y") +
  labs(x = NULL,
       y = "Value") +
  theme_classic()
```

</details>


## Exercise: Nighttime light reduction from Hurricane Maria

On September 20, 2017, [Hurricane Maria](https://en.wikipedia.org/wiki/Hurricane_Maria)---then a category 4 hurricane---struck Puerto Rico, killing an estimate 3,000 people and leaving significant damage. In this exercise, we'll use nighttime lights to understand earthquake damages & recovery.

```{r}
#| eval: false
library(sf)
library(blackmarbler)
library(ggplot2)

pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))
```

### Part 1: Monthly Trends

Make a figure that shows total monthly nighttime lights in Puerto Rico from January 2017 to December 2018.

__Hint:__ Within `bm_extract`, use the following code to avoid re-downloading data:

```r
bm_extract(...,
output_location_type = "file",
file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm0"))
```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

ntl_df <- bm_extract(roi_sf = pr_sf,
                     product_id = "VNP46A3",
                     date = seq.Date(from = ymd("2017-01-01"), 
                                     to = ymd("2018-12-01"), 
                                     by = "month"),
                     bearer = BEARER,
                     aggregation_fun = "sum",
                     
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm1"))

ntl_df %>%
  ggplot() +
  geom_vline(xintercept = ymd("2017-09-01")) +
  geom_col(aes(x = date,
               y = ntl_sum),
           fill = "darkorange") +
  labs(x = NULL,
       y = "NTL Radiance",
       title = "Puerto Rico nighttime lights before and after hurricane Maria") +
  theme_classic() +
  theme(plot.title = element_text(face = "bold"))
```

</details>


### Part 2: Daily Trends

Let's see if we can use the data to understand daily trends in nighttime lights. Use `bm_extract` to extract the daily sum of nighttime nighttime lights in the days before and after the earthquake hit: September 15, 2017 through September 25, 2017. Make two figures:

1. Showing daily sum of nighttime lights
2. Daily number of non-NA pixels across the country

Based on these figures, can we rely on daily nighttime lights to observe immediate damages of the earthquake?

__Hints__

1. Because we're using daily nighttime lights, the product ID will be: `"VNP46A2"`
2. For product ID `"VNP46A2"`, `bm_extract`/`bm_raster` by default uses `Gap_Filled_DNB_BRDF-Corrected_NTL`. This variable fills gaps in daily value (eg, when there is cloud cover) using observations from other days. For this exercise, we're interested in the actual daily values (ie, non-gap filled). Consequently, use variable: `DNB_BRDF-Corrected_NTL`.
3. Let's remove low-quality pixels where there could be cloud contamination; for this, set `quality_flag_rm` to `2`.
4. Within `bm_extract`, use the following code to avoid re-downloading data:

```r
bm_extract(...,
output_location_type = "file",
file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm0"))
```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

ntl_df <- bm_extract(roi_sf = pr_sf,
                     product_id = "VNP46A2",
                     date = seq.Date(from = ymd("2017-09-15"), 
                                     to = ymd("2017-09-25"), 
                                     by = "day"),
                     bearer = BEARER,
                     aggregation_fun = "sum",
                     variable = "DNB_BRDF-Corrected_NTL",
                     quality_flag_rm = 2,
                     
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm0"))

ntl_df %>%
  dplyr::select(COUNTRY, date, ntl_sum, prop_non_na_pixels) %>%
  pivot_longer(cols = c(ntl_sum, prop_non_na_pixels)) %>%
  dplyr::mutate(name_clean = case_when(
    name == "ntl_sum" ~ "NTL: Sum",
    name == "prop_non_na_pixels" ~ "Prop Non-NA Pixels"
  )) %>%
  ggplot() +
  geom_vline(xintercept = ymd("2017-09-20"),
             color = "red") +
  geom_col(aes(x = date,
               y = value)) +
  labs(x = "Day",
       y = "Value") +
  facet_wrap(~name_clean,
             scales = "free_y") +
  theme_classic()
```

</details>

### Part 3: Damage Assessment - ADM 1 level

Create a map that shows the percent change in nighttime lights at the ADM2 level, comparing September 2017 and October 2017.

__Hint:__ Within `bm_extract`, use the following code to avoid re-downloading data:

```r
bm_extract(...,
output_location_type = "file",
file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm1"))
```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

pr_sf <- read_sf(here("data", "puero_rico_adm1.geojson"))

ntl_df <- bm_extract(roi_sf = pr_sf,
                     product_id = "VNP46A3",
                     date = seq.Date(from = ymd("2017-09-01"), 
                                     to = ymd("2017-10-01"), 
                                     by = "month"),
                     bearer = BEARER,
                     aggregation_fun = "sum",
                     
                     output_location_type = "file",
                     file_dir = here("data", "ntl_blackmarble", "puerto_rico", "extracts", "adm1"))

ntl_pc_df <- ntl_df %>%
  pivot_wider(id_cols = NAME_1,
              values_from = ntl_sum,
              names_from = date) %>%
  mutate(pc = (`2017-10-01` - `2017-09-01`) / `2017-09-01` * 100)

pr_ntl_sf <- pr_sf %>%
  left_join(ntl_pc_df, by = "NAME_1")

pr_ntl_sf %>%
  ggplot() +
  geom_sf(aes(fill = pc)) +
  theme_void() +
  scale_fill_gradient(low = "red", high = "white") +
  labs(fill = "% Change",
       title = "% Change in NTL from Sept to Oct 2017")
```

</details>

### Part 4: Damage Assessment - Pixel level

Create a map at the pixel level that shows which pixels experienced an (1) increase (green), (2) decrease (red), or (3) no change (blue) in nighttime lights from September 2017 to October 2017.

__Notes:__

1. Let's only consider changes above a value of 1, so a pixel experienced an increase in lights if the change was above 1.
2. Only show pixels that had some baseline level of nighttime lights. Specifically, if a pixel had a value near 0 in September and near 0 in October, the change value should be `NA`---we don't classify this as "no change."

__Hint:__ Within `bm_raster`, use the following code to avoid re-downloading data:

```r
bm_extract(...,
output_location_type = "file",
file_dir = here("data", "ntl_blackmarble", "puerto_rico", "raster"))
```

```{r}
#| eval: false

library(tidyverse)
library(tidyterra)
library(blackmarbler)

pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

```

<details>
<summary>Click to see solution</summary>

```{r}
#| message: false
#| warning: false
#| echo: fenced

library(tidyverse)
library(tidyterra)
library(blackmarbler)

pr_sf <- read_sf(here("data", "puero_rico_adm0.geojson"))

r <- bm_raster(roi_sf = pr_sf,
               product_id = "VNP46A3",
               date = seq.Date(from = ymd("2017-09-01"), 
                               to = ymd("2017-10-01"), 
                               by = "month"),
               bearer = BEARER,
               
               output_location_type = "file",
               file_dir = here("data", "ntl_blackmarble", "puerto_rico", "raster"))

## Grab raster for each month
r_sep <- r[[1]]
r_oct <- r[[2]]

r_category <- r_sep
r_category[] <- NA
r_category[(r_sep > 1)] <- 0
r_category[(r_oct - r_sep) > 1]  <- 1
r_category[(r_oct - r_sep) < -1] <- -1

# Numeric now, which will be translated to a continuous scale. However,
# we want 3 distinct categories - so make character.
r_category[] <- r_category[] %>% as.character()

ggplot() +
  geom_spatraster(data = r_category, aes(fill = t2017_09)) +
  scale_fill_manual(
    values = c("-1" = "red", "0" = "dodgerblue", "1" = "green"),
    labels = c("-1" = "Decrease", "0" = "No change", "1" = "Increase"),
    name = "Change",
    na.value = "white"
  ) +
  theme_void() +
  labs(title = "Change in nighttime lights from Sept to Oct 2017")
```

</details>

# When to use `bm_raster` vs `bm_extract`
